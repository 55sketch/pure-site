{{setTitle     "Grids"}}
{{setSubTitle  "Mobile-first CSS grids."}}
{{setActiveNav "grids"}}

{{addLocalCSS "/css/grids.css"}}
{{!addLocalJS  "/js/grids.js"}}

{{> header}}

<div class="content">

    {{sectionHeading "Introduction to Pure Grids"}}

    <p>
        Pure has a responsive, mobile-first grid system. It's easy to work with and is very powerful.There are a few simple concepts to keep in mind:
    </p>

    <dl>
        <dt>Grid classes vs. unit classes</dt>
        <dd>
            Pure Grids consist of two types of classes: grid classes ({{code "pure-g"}} and unit classes ({{code "pure-u"}} or {{code "pure-u-*"}})
        </dd>

        <dt>The widths of the units are fractions</dt>
        <dd>
            Units have various class names that represent their widths. For example, {{code "pure-u-1-2"}} has a width of 50%, whereas {{code "pure-u-1-5"}} would have a width of 20%.
        </dd>

        <dt>All child elements of a grid must be units</dt>
        <dd>
            Child elements contained within an element with a {{code "pure-g"}} classname <em>must</em> be a grid unit with a {{code "pure-u"}} or {{code "pure-u-*"}} classname. However, you can have a {{code "pure-g"}} inside a {{code "pure-u-*"}} if you want to create nested grids.
        </dd>

        <dt>Content goes inside grid units<dt>
        <dd>
            All content which is visible to people needs to be contained inside a grid unit. This ensures that the content will be rendered properly.
        </dd>
    </dl>

    <aside>
        <p>
            When setting a {{code "font-family"}} in your project, be sure to check out the section on <a href="#using-grids-with-custom-fonts">using Grids with your font-family</a>.
        </p>
    </aside>

    <p>
        Let's start with a simple example. Here's a grid with three columns:
    </p>

    {{#code}}
    {{> grids/intro}}
    {{/code}}


    {{sectionHeading "Grids Units Sizes"}}

    <p>
        Pure ships with both a <b>5ths</b> and <b>24ths</b> based grid. Depicted below are the avilable units that can be appended to the <b>{{code "pure-u-*"}}</b> classname where {{code "*"}} is one of the unit factions listed below. For example the unit classname for 50% width is: {{code "pure-u-1-2"}}.
    </p>

  {{!
    <p class="pure-form">
        <label>
            <input class="grids-show-all" type="checkbox" checked>
            Show All Grids Units
        </label>
    </p>
  }}

    <h3>5ths-Based Units</h3>

  {{#each pure.gridunits.n5}}
    {{> grids/grids-unit}}
  {{/each}}

    <h3>24ths-Based Units</h3>

  {{#each pure.gridunits.n24}}
    {{> grids/grids-unit}}
  {{/each}}

    <h3>Custom Unit Sizes</h3>
    <p>
        We are working on building tools to allow people to customize Pure Grids. The first low-level tools, the <b><a href="https://github.com/ericf/rework-pure-grids">Pure Grids Rework Plugin</a></b>, is available to use today&mdash;we use this tool to generate Pure's built-in unit sizes.
    </p>


    {{sectionHeading "Mobile-first Grids"}}

    <p>
        Pure Grids are mobile-first. When writing your HTML, you should start with the mobile layout in mind, and build up your tablet and desktop experience from it.
    </p>
    <p>
        We realize that different applications need grids at different media query breakpoints, so we don't bundle media queries directly into Pure. Instead, you can define your own media queries, and generate a custom grid using our <a href="https://github.com/ericf/rework-pure-grids">Pure Grids Rework plugin</a>.
    </p>

    <h3>Generate Mobile-first Grid Units</h3>

    <p>
        To generate Mobile-first grid units, you need to have <a href="http://nodejs.org" alt="NodeJS">NodeJS and <a href="http://npmjs.org" alt="npm">npm</a> installed. Then, run the following:
    </p>

    {{#code}}
        $ npm i rework rework-pure-grids
    {{/code}}

    <p>
        To create a mobile-first grid, pass in the media queries that you want to work with, and provide a class name for the grid at each media query:
    </p>

    {{#code "js"}}
    var fs = require('fs'),
    rework = require('rework'),
    pureGrids = require('rework-pure-grids');

    //Generate a 12-column grid, which responds to the following 2 media query breakpoints.
    var css = rework('').use(pureGrids.units([5,24], {
        mediaQueries: {
            med  : 'screen and (min-width: 48em)',
            lrg  : 'screen and (min-width: 75em)'
        }
    })).toString();

    fs.writeFile('mobile-first-grid.css', css, function (err) {
        if (err) throw err;
        console.log('File saved to mobile-first-grid.css');
    });
    {{/code}}

    <p>
        The table above will create a 24-column mobile-first grid with the following characteristics:
    </p>

    <p>
        <table class="pure-table pure-table-bordered">
            <thead>
                <tr>
                    <th></th>
                    <th>Small Devices <br><small>(< 48em)</small></th>
                    <th>Medium Devices <br><small>(≥ 48em)</small></th>
                    <th>Large Devices <br><small>(≥ 75em)</small></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="font-weight: bold;">Class Prefix</td>
                    <td>none ({{code "pure-u-*"}})</td>
                    <td>{{code "pure-u-med-*"}}</td>
                    <td>{{code "pure-u-lrg-*"}}</td>
                </tr>
            </tbody>
        </table>
    </p>

    <p>
        This responsive grid that we just created is actually the same grid that this site is built on! You can <a href="/css/responsive-grid.css" alt="Grid CSS">check out the CSS here</a>.
    </p>

    <aside>
        <p>
            When using our Rework plugin, you can customize your grid in various ways, such as changing the number of columns or modifying grid class names.
        </p>
    </aside>


    <h3>Using Mobile-first Grids</h3>
    <p>
        After generating our mobile-first grid, we can start creating some dynamic layouts that look great irrespective of the width of a device. For example, if you want your columns to be full-width on mobile, half-width on medium devices (like tablets), and quarter-width on large devices (like desktops), you would write this:
    </p>

    {{#code}}
    <!-- Columns are 100% wide on mobile, 50% on tablets, and 25% on desktops  -->
    <div class="pure-g">
      <div class="pure-u-1 pure-u-med-1-2 pure-u-lrg-1-4">Some content</div>
      <div class="pure-u-1 pure-u-med-1-2 pure-u-lrg-1-4">Some content/div>
      <div class="pure-u-1 pure-u-med-1-2 pure-u-lrg-1-4">Some content</div>
      <div class="pure-u-1 pure-u-med-1-2 pure-u-lrg-1-4">Some content</div>
    </div>
    {{/code}}

    <aside>
        <p>
           You don't need to add all the grid classes to each of your elements. The grid classes work with widths that are greater than or equal to the media query width that you defined. For example, a {{code "pure-u-med-1-2"}} will be {{code "width: 50%"}} at all screen sizes which are {{code "≥ 768px"}}, unless you specify an explicit {{code "pure-u-lrg-*"}} class.
        </p>
    </aside>

    <h3>Adding Mobile-first Grids to your Site</h3>

    <p>
        Once you have your responsive grid CSS, you can add it below the {{code "pure-min.css"}} file on your page.
    </p>

    {{#code}}
    <link rel="stylesheet" href="http://yui.yahooapis.com/pure/{{pure.version}}/pure-min.css">
<link rel="stylesheet" href="your-mobile-first-grid.css">
    {{/code}}


    <h3>Mobile-first Grid: An Example</h3>

    <p>
        Resize the page to see the content switch from a single column layout to a four-column layout.
    </p>

    {{> grids/four-col}}

    {{sectionHeading "Fluid Images"}}

    {{> grids/fluid-images}}

    {{sectionHeading "Applying Padding and Borders to Grid Units"}}

    <p>
        To add borders and padding to Pure Grids, you have two options. The first option is to nest a {{code "<div>"}} inside each Grid unit and style the child container:
    </p>

    {{#code}}
    {{> grids/padding-nested}}
    {{/code}}

    <p>
        The second option is to add borders and padding directly to a grid unit. This would ordinarily risk breaking the layout, but you can easily avoid this problem by augmenting the behavior of the grid itself with a {{code "box-sizing: border-box"}} rule:
    </p>

    {{#code}}
    {{> grids/padding-box-sizing}}
    {{/code}}

    <p>
        Using {{code "box-sizing: border-box"}} keeps your markup cleaner, but has two minor drawbacks. Legacy browsers such as IE 7 and below <a href="http://caniuse.com/#search=box-sizing">lack support</a> for {{code "box-sizing"}}, and setting this property on all grid units makes it harder to override or unset the value later on. As an unopinionated library, Pure lets {{code "box-sizing"}} remain at the default value of {{code "content-box"}} and leaves the choice up to you.
    </p>


    {{sectionHeading "Using Grids with Your Font-Family" id="using-grids-with-custom-fonts" }}

    <p>
        Pure Grids use a specific font stack to ensure the greatest OS/browser compatibility, and by default grid units will have {{code "font-family: sans-serif;"}} applied — this is the default font stack Pure's Base (Normalize.css) applies to the {{code "<body>"}}. Fortunately, it's quite easy to make sure your {{code "font-family"}} also applies to content within Pure Girds. Instead of applying your {{code "font-family"}} to only the {{code "<body>"}} element, apply it to the grid units as well:
    </p>

    {{#code}}
    {{> grids/custom-font}}
    {{/code}}


    {{sectionHeading "Want to just use Grids?"}}

    <p>
        Grids is part of the Pure CSS file. However, if you just want Grids and not the other modules, you can pull it down separately. Just include this {{code "<link>"}} element in your {{code "<head>"}}.
    </p>

  {{#code}}
    <link rel="stylesheet" href="http://yui.yahooapis.com/pure/{{pure.version}}/grids-min.css">
  {{/code}}

</div>
