{{setTitle     "Tools"}}
{{setSubTitle  "Write, manipulate, and do more with CSS."}}
{{setActiveNav "tools"}}

{{> header}}

<div class="content">
    {{sectionHeading "Installing Pure with Bower"}}

    <p>
        You can add Pure to your project through <a href="http://bower.io">Bower</a>. This is our recommended way to serve Pure on SSL-encrypted websites.
    </p>

    {{#code}}
        bower install pure --save
    {{/code}}

    {{sectionHeading "Extending Pure with Grunt"}}

    <p>
        We've written several tools that help developers extend and manipulate Pure's source code to play well with application's CSS.
    </p>
    <p>
        These tools are available as <a href="http://gruntjs.com">Grunt</a> plugins that can easily be integrated into your existing {{code "Gruntfile.js"}}.
    </p>

    <aside>
        <p>
            If you haven't used Grunt before, it's very easy to set up. Just head over to the <a href="http://gruntjs.com/getting-started">Getting Started</a> page to learn more.
        </p>
    </aside>

    {{sectionHeading "Generate Responsive Grids"}}

    <p>
        Pure makes it easy to create mobile-first responsive websites. However, since media queries cannot be over-written, we keep them out of Pure's source code. Instead, we use tooling to create responsive grids.
    </p>

    <h3>Via Grunt</h3>

    <p>Download the {{code "grunt-pure-grids"}} module from npm.</p>

    {{#code}}
    npm install grunt-pure-grids --save-dev
    {{/code}}

    <p>Next, add it to your {{code "Gruntfile.js"}}.</p>

    {{#code}}
    grunt.loadNpmTasks('grunt-pure-grids');
    {{/code}}

    <p>
        Finally, add the neccessary configuration through the {{code "grid_units"}} task. To see a full list of all configurable properties, check out <a href="https://github.com/ericf/rework-pure-grids">the documentation on GitHub</a>.
    </p>

    {{#code "js"}}
    grunt.initConfig({
        grid_units: {
            dest : 'build/public/css/main-grid.css',
            options: {
                units: 12, //12-column grid
                mediaQueries: {
                    sm : 'screen and (min-width: 35.5em)', // 568px
                    med: 'screen and (min-width: 48em)',   // 768px
                    lrg: 'screen and (min-width: 58em)',   // 928px
                    xl : 'screen and (min-width: 75em)'    // 1200px
                }
            }
        }
    });
    {{/code}}

    <h3>Via Rework</h3>

    <p>
        If you're not using Grunt, you can also generate responsive grids through the command line using our Rework plugin, <a href="https://github.com/ericf/rework-pure-grids">{{code "rework-pure-grids"}}</a>. It has the same configuration options as our Grunt task.
    </p>

    <p>You can install the Rework plugin through npm.</p>

    {{#code}}
    npm install rework rework-pure-grids
    {{/code}}

    <p>You can then run it in NodeJS.</p>

    {{#code "js"}}
    var rework = require('rework'),
    pureGrids = require('rework-pure-grids');

    var css = rework('').use(pureGrids.units({
        mediaQueries: {
            sm  : 'screen and (min-width: 30em)',
            med : 'screen and (min-width: 48em)',
            lrg : 'screen and (min-width: 64em)',
            xlrg: 'screen and (min-width: 75em)'
        }
    })).toString();

    console.log(css); //this will log out the grid css
    {{/code}}

    {{sectionHeading "Adapting Mobile-first Designs for Old Browsers"}}

    <p>
        Developing your website from a mobile-first perspective has numerous benefits:
    </p>
    <ul>
        <li>
            CSS rules are easier to add than to remove, so it makes sense to start from the smallest and simplest layout, and add styles for larger screens.
        </li>
        <li>
            Forces you to think about your most important content, instead of shoe-horning desktop experiences into small screens.
        </li>
    </ul>

    <p>
        However, one of the problems with mobile-first designs is that old browsers that don't support media queries (such as IE8) get a mobile-phone experience, which looks odd on a big screen.
    </p>

    <p>
        To solve this, we helped develop <a href="https://github.com/jtangelder/grunt-stripmq">{{code "grunt-stripmq"}}</a>. By using this Grunt task, you're able to write mobile-first CSS, while ensuring that users on IE8 and below get to view the desktop experience. It's the best of both worlds!
    </p>

    <h3>Via Grunt</h3>

    <p>Download the {{code "grunt-stripmq"}} module from npm.</p>

    {{#code}}
    npm install grunt-stripmq --save-dev
    {{/code}}

    <p>Next, add the Grunt task to your {{code "Gruntfile.js"}}</p>
    {{#code}}
    grunt.loadNpmTasks('grunt-stripmq');
    {{/code}}

    <p>
        Add the neccessary configuration through the {{code "stripmq"}} task. Check out <a href="https://github.com/jtangelder/grunt-stripmq">the documentation</a> for a full list of available options.
    </p>

    {{#code "js"}}
    grunt.initConfig({
        stripmq: {
            all: {
                files: {
                    //Takes the input file `grid.css`, and generates `grid-old-ie.css`
                    'css/grid-old-ie.css': ['css/grid.css'],

                    //Takes the input file `app.css`, and generates `app-old-ie.css`
                    'css/app-old-ie.css': ['css/app.css']
                }
            }
        }
    });
    {{/code}}

    <p>
        Finally, you'll need to add this block in your {{code "<head>"}} to let old IE browsers request the generated CSS files.
    </p>

    {{#code}}
    <!--[if lt IE 9]>
    <link rel="stylesheet" href="css/grid-old-ie.css">
    <link rel="stylesheet" href="css/app-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
    <link rel="stylesheet" href="css/grid.css">
    <link rel="stylesheet" href="css/app.css">
    <!--<![endif]-->
    {{/code}}


    {{sectionHeading "Mutating Selectors"}}

    <p>
        All selectors defined in Pure's source code begin with the {{code ".pure-"}} prefix. However, you may want to change this. To accomplish this task, we wrote <a href="https://github.com/ericf/grunt-css-selectors">{{code "grunt-css-selectors"}}</a>, a Grunt task that lets you mutate CSS selectors.
    </p>

    <h3>Via Grunt</h3>

    <p>Install {{code "grunt-css-selectors"}} through npm.</p>
    {{#code}}
    npm install grunt-css-selectors --save-dev
    {{/code}}

    <p>Once it's installed, add the task to your {{code "Gruntfile.js"}}</p>
    {{#code}}
    grunt.loadNpmTasks('grunt-css-selectors');
    {{/code}}

    <p>
        Finally, add the neccessary configuration through the {{code "css_selectors"}} task. Check out <a href="https://github.com/ericf/grunt-css-selectors">the documentation</a> for more details.
    </p>

    {{#code "js"}}
    grunt.initConfig({
    css_selectors: {
        options: {
            mutations: [
                {prefix: '.foo'}
            ]
        },
        files: {
            'dest/foo-prefixed.css': ['src/foo.css'],
        }
    }
    });
    {{/code}}

    <aside>
        <p>
            If you have questions or run into issues while these tools, please file them on their respective repositories.
        </p>
    </aside>


</div>
